//===---APINamesMath.inc ---------------------------------------------===//
//
// Copyright (C) 2018 - 2020 Intel Corporation. All rights reserved.
//
// The information and source code contained herein is the exclusive
// property of Intel Corporation and may not be disclosed, examined
// or reproduced in whole or in part without explicit written authorization
// from the company.
//
//===-----------------------------------------------------------------===//
// Half Arithmetic Functions
ENTRY_RENAMED("__hfma", MapNames::getClNamespace() + "::fma")

// Half2 Arithmetic Functions
ENTRY_RENAMED("__hfma2", MapNames::getClNamespace() + "::fma")

// Half Comparison Functions
ENTRY_RENAMED("__hisinf", MapNames::getClNamespace() + "::isinf")
ENTRY_RENAMED("__hisnan", MapNames::getClNamespace() + "::isnan")

// Half Math Functions
ENTRY_RENAMED("hceil", MapNames::getClNamespace() + "::ceil")
ENTRY_RENAMED("hcos", MapNames::getClNamespace() + "::cos")
ENTRY_RENAMED("hexp", MapNames::getClNamespace() + "::exp")
ENTRY_RENAMED("hexp10", MapNames::getClNamespace() + "::exp10")
ENTRY_RENAMED("hexp2", MapNames::getClNamespace() + "::exp2")
ENTRY_RENAMED("hfloor", MapNames::getClNamespace() + "::floor")
ENTRY_RENAMED("hlog", MapNames::getClNamespace() + "::log")
ENTRY_RENAMED("hlog10", MapNames::getClNamespace() + "::log10")
ENTRY_RENAMED("hlog2", MapNames::getClNamespace() + "::log2")
ENTRY_RENAMED("hrint", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED("hrsqrt", MapNames::getClNamespace() + "::rsqrt")
ENTRY_RENAMED("hsin", MapNames::getClNamespace() + "::sin")
ENTRY_RENAMED("hsqrt", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED("htrunc", MapNames::getClNamespace() + "::trunc")

// Half2 Math Functions
ENTRY_RENAMED("h2ceil", MapNames::getClNamespace() + "::ceil")
ENTRY_RENAMED("h2cos", MapNames::getClNamespace() + "::cos")
ENTRY_RENAMED("h2exp", MapNames::getClNamespace() + "::exp")
ENTRY_RENAMED("h2exp10", MapNames::getClNamespace() + "::exp10")
ENTRY_RENAMED("h2exp2", MapNames::getClNamespace() + "::exp2")
ENTRY_RENAMED("h2floor", MapNames::getClNamespace() + "::floor")
ENTRY_RENAMED("h2log", MapNames::getClNamespace() + "::log")
ENTRY_RENAMED("h2log10", MapNames::getClNamespace() + "::log10")
ENTRY_RENAMED("h2log2", MapNames::getClNamespace() + "::log2")
ENTRY_RENAMED("h2rint", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED("h2rsqrt", MapNames::getClNamespace() + "::rsqrt")
ENTRY_RENAMED("h2sin", MapNames::getClNamespace() + "::sin")
ENTRY_RENAMED("h2sqrt", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED("h2trunc", MapNames::getClNamespace() + "::trunc")

// Single Precision Mathematical Functions
ENTRY_RENAMED_SINGLE("acosf", MapNames::getClNamespace() + "::acos")
ENTRY_RENAMED_SINGLE("acoshf", MapNames::getClNamespace() + "::acosh")
ENTRY_RENAMED_SINGLE("asinf", MapNames::getClNamespace() + "::asin")
ENTRY_RENAMED_SINGLE("asinhf", MapNames::getClNamespace() + "::asinh")
ENTRY_RENAMED_SINGLE("atan2f", MapNames::getClNamespace() + "::atan2")
ENTRY_RENAMED_SINGLE("atanf", MapNames::getClNamespace() + "::atan")
ENTRY_RENAMED_SINGLE("atanhf", MapNames::getClNamespace() + "::atanh")
ENTRY_RENAMED_SINGLE("cbrtf", MapNames::getClNamespace() + "::cbrt")
ENTRY_RENAMED_SINGLE("ceilf", MapNames::getClNamespace() + "::ceil")
ENTRY_RENAMED_SINGLE("copysignf", MapNames::getClNamespace() + "::copysign")
ENTRY_RENAMED_SINGLE("cosf", MapNames::getClNamespace() + "::cos")
ENTRY_RENAMED_SINGLE("coshf", MapNames::getClNamespace() + "::cosh")
ENTRY_RENAMED_SINGLE("cospif", MapNames::getClNamespace() + "::cospi")
ENTRY_RENAMED_SINGLE("erfcf", MapNames::getClNamespace() + "::erfc")
ENTRY_RENAMED_SINGLE("erff", MapNames::getClNamespace() + "::erf")
ENTRY_RENAMED_SINGLE("exp10f", MapNames::getClNamespace() + "::exp10")
ENTRY_RENAMED_SINGLE("exp2f", MapNames::getClNamespace() + "::exp2")
ENTRY_RENAMED_SINGLE("expf", MapNames::getClNamespace() + "::exp")
ENTRY_RENAMED_SINGLE("expm1f", MapNames::getClNamespace() + "::expm1")
ENTRY_RENAMED_SINGLE("fabsf", MapNames::getClNamespace() + "::fabs")
ENTRY_RENAMED_SINGLE("fdimf", MapNames::getClNamespace() + "::fdim")
ENTRY_RENAMED_SINGLE("fdividef", MapNames::getClNamespace() + "::native::divide")
ENTRY_RENAMED_SINGLE("floorf", MapNames::getClNamespace() + "::floor")
ENTRY_RENAMED_SINGLE("fmaf", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_SINGLE("fmaxf", MapNames::getClNamespace() + "::fmax")
ENTRY_RENAMED_SINGLE("fminf", MapNames::getClNamespace() + "::fmin")
ENTRY_RENAMED_SINGLE("fmodf", MapNames::getClNamespace() + "::fmod")
ENTRY_RENAMED_SINGLE("hypotf", MapNames::getClNamespace() + "::hypot")
ENTRY_RENAMED_SINGLE("ilogbf", MapNames::getClNamespace() + "::ilogb")
ENTRY_RENAMED_SINGLE("isfinite", MapNames::getClNamespace() + "::isfinite")
ENTRY_RENAMED_SINGLE("isinf", MapNames::getClNamespace() + "::isinf")
ENTRY_RENAMED_SINGLE("isnan", MapNames::getClNamespace() + "::isnan")
ENTRY_RENAMED_SINGLE("ldexpf", MapNames::getClNamespace() + "::ldexp")
ENTRY_RENAMED_SINGLE("lgammaf", MapNames::getClNamespace() + "::lgamma")
ENTRY_RENAMED_SINGLE("llrintf", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_SINGLE("llroundf", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_SINGLE("logf", MapNames::getClNamespace() + "::log")
ENTRY_RENAMED_SINGLE("log10f", MapNames::getClNamespace() + "::log10")
ENTRY_RENAMED_SINGLE("log1pf", MapNames::getClNamespace() + "::log1p")
ENTRY_RENAMED_SINGLE("log2f", MapNames::getClNamespace() + "::log2")
ENTRY_RENAMED_SINGLE("logbf", MapNames::getClNamespace() + "::logb")
ENTRY_RENAMED_SINGLE("lrintf", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_SINGLE("lroundf", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_SINGLE("nextafterf", MapNames::getClNamespace() + "::nextafter")
ENTRY_RENAMED_SINGLE("powf", MapNames::getClNamespace() + "::pow")
ENTRY_RENAMED_SINGLE("remainderf", MapNames::getClNamespace() + "::remainder")
ENTRY_RENAMED_SINGLE("rintf", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_SINGLE("roundf", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_SINGLE("rsqrtf", MapNames::getClNamespace() + "::rsqrt")
ENTRY_RENAMED_SINGLE("signbit", MapNames::getClNamespace() + "::signbit")
ENTRY_RENAMED_SINGLE("sinf", MapNames::getClNamespace() + "::sin")
ENTRY_RENAMED_SINGLE("sinhf", MapNames::getClNamespace() + "::sinh")
ENTRY_RENAMED_SINGLE("sinpif", MapNames::getClNamespace() + "::sinpi")
ENTRY_RENAMED_SINGLE("sqrtf", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_SINGLE("tanf", MapNames::getClNamespace() + "::tan")
ENTRY_RENAMED_SINGLE("tanhf", MapNames::getClNamespace() + "::tanh")
ENTRY_RENAMED_SINGLE("tgammaf", MapNames::getClNamespace() + "::tgamma")
ENTRY_RENAMED_SINGLE("truncf", MapNames::getClNamespace() + "::trunc")

// Single precision intrinisics
ENTRY_RENAMED_SINGLE("__cosf", MapNames::getClNamespace() + "::cos")
ENTRY_RENAMED_SINGLE("__exp10f", MapNames::getClNamespace() + "::exp10")
ENTRY_RENAMED_SINGLE("__expf", MapNames::getClNamespace() + "::exp")
ENTRY_RENAMED_SINGLE("__fdividef", MapNames::getClNamespace() + "::native::divide")
ENTRY_RENAMED_SINGLE("__fmaf_rd", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_SINGLE("__fmaf_rn", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_SINGLE("__fmaf_ru", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_SINGLE("__fmaf_rz", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_SINGLE("__frcp_rd", MapNames::getClNamespace() + "::native::recip")
ENTRY_RENAMED_SINGLE("__frcp_rn", MapNames::getClNamespace() + "::native::recip")
ENTRY_RENAMED_SINGLE("__frcp_ru", MapNames::getClNamespace() + "::native::recip")
ENTRY_RENAMED_SINGLE("__frcp_rz", MapNames::getClNamespace() + "::native::recip")
ENTRY_RENAMED_SINGLE("__frsqrt_rn", MapNames::getClNamespace() + "::rsqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rd", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rn", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_ru", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rz", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_SINGLE("__log10f", MapNames::getClNamespace() + "::log10")
ENTRY_RENAMED_SINGLE("__log2f", MapNames::getClNamespace() + "::log2")
ENTRY_RENAMED_SINGLE("__logf", MapNames::getClNamespace() + "::log")
ENTRY_RENAMED_SINGLE("__powf", MapNames::getClNamespace() + "::pow")
ENTRY_RENAMED_SINGLE("__sinf", MapNames::getClNamespace() + "::sin")
ENTRY_RENAMED_SINGLE("__tanf", MapNames::getClNamespace() + "::tan")

// Double Precision Mathematical Functions
ENTRY_RENAMED_DOUBLE("acos", MapNames::getClNamespace() + "::acos")
ENTRY_RENAMED_DOUBLE("acosh", MapNames::getClNamespace() + "::acosh")
ENTRY_RENAMED_DOUBLE("asin", MapNames::getClNamespace() + "::asin")
ENTRY_RENAMED_DOUBLE("asinh", MapNames::getClNamespace() + "::asinh")
ENTRY_RENAMED_DOUBLE("atan2", MapNames::getClNamespace() + "::atan2")
ENTRY_RENAMED_DOUBLE("atan", MapNames::getClNamespace() + "::atan")
ENTRY_RENAMED_DOUBLE("atanh", MapNames::getClNamespace() + "::atanh")
ENTRY_RENAMED_DOUBLE("cbrt", MapNames::getClNamespace() + "::cbrt")
ENTRY_RENAMED_DOUBLE("ceil", MapNames::getClNamespace() + "::ceil")
ENTRY_RENAMED_DOUBLE("copysign", MapNames::getClNamespace() + "::copysign")
ENTRY_RENAMED_DOUBLE("cos", MapNames::getClNamespace() + "::cos")
ENTRY_RENAMED_DOUBLE("cosh", MapNames::getClNamespace() + "::cosh")
ENTRY_RENAMED_DOUBLE("cospi", MapNames::getClNamespace() + "::cospi")
ENTRY_RENAMED_DOUBLE("erfc", MapNames::getClNamespace() + "::erfc")
ENTRY_RENAMED_DOUBLE("erf", MapNames::getClNamespace() + "::erf")
ENTRY_RENAMED_DOUBLE("exp10", MapNames::getClNamespace() + "::exp10")
ENTRY_RENAMED_DOUBLE("exp2", MapNames::getClNamespace() + "::exp2")
ENTRY_RENAMED_DOUBLE("exp", MapNames::getClNamespace() + "::exp")
ENTRY_RENAMED_DOUBLE("expm1", MapNames::getClNamespace() + "::expm1")
ENTRY_RENAMED_DOUBLE("fabs", MapNames::getClNamespace() + "::fabs")
ENTRY_RENAMED_DOUBLE("fdim", MapNames::getClNamespace() + "::fdim")
ENTRY_RENAMED_DOUBLE("floor", MapNames::getClNamespace() + "::floor")
ENTRY_RENAMED_DOUBLE("fma", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_DOUBLE("fmax", MapNames::getClNamespace() + "::fmax")
ENTRY_RENAMED_DOUBLE("fmin", MapNames::getClNamespace() + "::fmin")
ENTRY_RENAMED_DOUBLE("fmod", MapNames::getClNamespace() + "::fmod")
ENTRY_RENAMED_DOUBLE("hypot", MapNames::getClNamespace() + "::hypot")
ENTRY_RENAMED_DOUBLE("ilogb", MapNames::getClNamespace() + "::ilogb")
ENTRY_RENAMED_DOUBLE("ldexp", MapNames::getClNamespace() + "::ldexp")
ENTRY_RENAMED_DOUBLE("lgamma", MapNames::getClNamespace() + "::lgamma")
ENTRY_RENAMED_DOUBLE("llrint", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_DOUBLE("llround", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_SINGLE("log", MapNames::getClNamespace() + "::log")
ENTRY_RENAMED_DOUBLE("log10", MapNames::getClNamespace() + "::log10")
ENTRY_RENAMED_DOUBLE("log1p", MapNames::getClNamespace() + "::log1p")
ENTRY_RENAMED_DOUBLE("log2", MapNames::getClNamespace() + "::log2")
ENTRY_RENAMED_DOUBLE("logb", MapNames::getClNamespace() + "::logb")
ENTRY_RENAMED_DOUBLE("lrint", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_DOUBLE("lround", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_DOUBLE("nextafter", MapNames::getClNamespace() + "::nextafter")
ENTRY_RENAMED_DOUBLE("pow", MapNames::getClNamespace() + "::pow")
ENTRY_RENAMED_DOUBLE("remainder", MapNames::getClNamespace() + "::remainder")
ENTRY_RENAMED_DOUBLE("rint", MapNames::getClNamespace() + "::rint")
ENTRY_RENAMED_DOUBLE("round", MapNames::getClNamespace() + "::round")
ENTRY_RENAMED_DOUBLE("rsqrt", MapNames::getClNamespace() + "::rsqrt")
ENTRY_RENAMED_DOUBLE("sin", MapNames::getClNamespace() + "::sin")
ENTRY_RENAMED_DOUBLE("sinh", MapNames::getClNamespace() + "::sinh")
ENTRY_RENAMED_DOUBLE("sinpi", MapNames::getClNamespace() + "::sinpi")
ENTRY_RENAMED_DOUBLE("sqrt", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_DOUBLE("tan", MapNames::getClNamespace() + "::tan")
ENTRY_RENAMED_DOUBLE("tanh", MapNames::getClNamespace() + "::tanh")
ENTRY_RENAMED_DOUBLE("tgamma", MapNames::getClNamespace() + "::tgamma")
ENTRY_RENAMED_DOUBLE("trunc", MapNames::getClNamespace() + "::trunc")

// Double precision intrinisics
ENTRY_RENAMED_DOUBLE("__dsqrt_rd", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_rn", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_ru", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_rz", MapNames::getClNamespace() + "::sqrt")
ENTRY_RENAMED_DOUBLE("__fma_rd", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_DOUBLE("__fma_rn", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_DOUBLE("__fma_ru", MapNames::getClNamespace() + "::fma")
ENTRY_RENAMED_DOUBLE("__fma_rz", MapNames::getClNamespace() + "::fma")

//  Half Precision Conversion And Data Movement
ENTRY_RENAMED("__half_as_short", "dpct::bit_cast<" + MapNames::getClNamespace() + "::half, short>")
ENTRY_RENAMED("__half_as_ushort", "dpct::bit_cast<" + MapNames::getClNamespace() + "::half, unsigned short>")
ENTRY_RENAMED("__short_as_half", "dpct::bit_cast<short, " + MapNames::getClNamespace() + "::half>")
ENTRY_RENAMED("__ushort_as_half", "dpct::bit_cast<unsigned short, " + MapNames::getClNamespace() + "::half>")

// Type Casting Intrinsics
ENTRY_RENAMED("__double_as_longlong", "dpct::bit_cast<double, long long>")
ENTRY_RENAMED("__float_as_int", "dpct::bit_cast<float, int>")
ENTRY_RENAMED("__float_as_uint", "dpct::bit_cast<float, unsigned int>")
ENTRY_RENAMED("__int_as_float", "dpct::bit_cast<int, float>")
ENTRY_RENAMED("__longlong_as_double", "dpct::bit_cast<long long, double>")
ENTRY_RENAMED("__uint_as_float", "dpct::bit_cast<unsigned int, float>")

// Device: int => sycl::abs, (float, double) => sycl::fabs
// Host:   int => abs, float => fabsf, double => fabs, long double => fabsl
ENTRY_RENAMED("abs", MapNames::getClNamespace() + "::abs")

// Device: sycl::max
// Host:   int => max, float => fmaxf, double => fmax, long double => fmaxl
ENTRY_RENAMED("max", MapNames::getClNamespace() + "::max")

// Device: sycl::min
// Host:   int => min, float => fminf, double => fmin, long double => fminl
ENTRY_RENAMED("min", MapNames::getClNamespace() + "::min")

// Integer Intrinsics
ENTRY_RENAMED("__clz", MapNames::getClNamespace() + "::clz")
ENTRY_RENAMED("__clzll", MapNames::getClNamespace() + "::clz")
ENTRY_RENAMED("__hadd", MapNames::getClNamespace() + "::hadd")
ENTRY_RENAMED("__mul24", MapNames::getClNamespace() + "::mul24")
ENTRY_RENAMED("__mulhi", MapNames::getClNamespace() + "::mul_hi")
ENTRY_RENAMED("__popc", MapNames::getClNamespace() + "::popcount")
ENTRY_RENAMED("__popcll", MapNames::getClNamespace() + "::popcount")

// Used to add header file "<cmath>" into the file that calls "fabs".
ENTRY_RENAMED("fabs", "fabs")


// Single Precision Mathematical Functions
ENTRY_EMULATED("frexpf", MapNames::getClNamespace() + "::frexp")
ENTRY_EMULATED("modff", MapNames::getClNamespace() + "::modf")
ENTRY_EMULATED("nanf", MapNames::getClNamespace() + "::nan")
ENTRY_EMULATED("nearbyintf", MapNames::getClNamespace() + "::floor")
ENTRY_EMULATED("remquof", MapNames::getClNamespace() + "::remquo")
ENTRY_EMULATED("rhypotf", MapNames::getClNamespace() + "::hypot")
ENTRY_EMULATED("sincosf", MapNames::getClNamespace() + "::sincos")
ENTRY_EMULATED("sincospif", MapNames::getClNamespace() + "::sincos")
ENTRY_EMULATED("__sincosf", MapNames::getClNamespace() + "::sincos")

// Double Precision Mathematical Functions
ENTRY_EMULATED("frexp", MapNames::getClNamespace() + "::frexp")
ENTRY_EMULATED("modf", MapNames::getClNamespace() + "::modf")
ENTRY_EMULATED("nan", MapNames::getClNamespace() + "::nan")
ENTRY_EMULATED("nearbyint", MapNames::getClNamespace() + "::floor")
ENTRY_EMULATED("remquo", MapNames::getClNamespace() + "::remquo")
ENTRY_EMULATED("rhypot", MapNames::getClNamespace() + "::hypot")
ENTRY_EMULATED("sincos", MapNames::getClNamespace() + "::sincos")
ENTRY_EMULATED("sincospi", MapNames::getClNamespace() + "::sincos")


// Half/Half2 Arithmetic Functions
ENTRY_OPERATOR("__h2div", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__hdiv", BinaryOperatorKind::BO_Div)

ENTRY_OPERATOR("__hmul", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__hmul2", BinaryOperatorKind::BO_Mul)


ENTRY_OPERATOR("__hsub", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__hsub2", BinaryOperatorKind::BO_Sub)

ENTRY_OPERATOR("__hneg", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__hneg2", BinaryOperatorKind::BO_Sub)

// Half Comparison Functions
ENTRY_OPERATOR("__heq", BinaryOperatorKind::BO_EQ)
ENTRY_OPERATOR("__hne", BinaryOperatorKind::BO_NE)
ENTRY_OPERATOR("__hge", BinaryOperatorKind::BO_GE)
ENTRY_OPERATOR("__hgt", BinaryOperatorKind::BO_GT)
ENTRY_OPERATOR("__hle", BinaryOperatorKind::BO_LE)
ENTRY_OPERATOR("__hlt", BinaryOperatorKind::BO_LT)

// Single Precision Mathematical Functions
ENTRY_OPERATOR("__fadd_rd", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_rn", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_ru", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_rz", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fsub_rd", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_rn", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_ru", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_rz", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fmul_rd", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_rn", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_ru", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_rz", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fdiv_rd", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_rn", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_ru", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_rz", BinaryOperatorKind::BO_Div)

// Double precision intrinisics
ENTRY_OPERATOR("__dadd_rd", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_rn", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_ru", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_rz", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dsub_rd", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_rn", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_ru", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_rz", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dmul_rd", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_rn", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_ru", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_rz", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__ddiv_rd", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_rn", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_ru", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_rz", BinaryOperatorKind::BO_Div)


//  Half Precision Conversion And Data Movement
ENTRY_TYPECAST("__float22half2_rn")
ENTRY_TYPECAST("__float2half")
ENTRY_TYPECAST("__float2half2_rn")
ENTRY_TYPECAST("__float2half_rd")
ENTRY_TYPECAST("__float2half_rn")
ENTRY_TYPECAST("__float2half_ru")
ENTRY_TYPECAST("__float2half_rz")
ENTRY_TYPECAST("__floats2half2_rn")
ENTRY_TYPECAST("__half22float2")
ENTRY_TYPECAST("__half2float")
ENTRY_TYPECAST("__half2half2")
ENTRY_TYPECAST("__half2int_rd")
ENTRY_TYPECAST("__half2int_rn")
ENTRY_TYPECAST("__half2int_ru")
ENTRY_TYPECAST("__half2int_rz")
ENTRY_TYPECAST("__half2ll_rd")
ENTRY_TYPECAST("__half2ll_rn")
ENTRY_TYPECAST("__half2ll_ru")
ENTRY_TYPECAST("__half2ll_rz")
ENTRY_TYPECAST("__half2short_rd")
ENTRY_TYPECAST("__half2short_rn")
ENTRY_TYPECAST("__half2short_ru")
ENTRY_TYPECAST("__half2short_rz")
ENTRY_TYPECAST("__half2uint_rd")
ENTRY_TYPECAST("__half2uint_rn")
ENTRY_TYPECAST("__half2uint_ru")
ENTRY_TYPECAST("__half2uint_rz")
ENTRY_TYPECAST("__half2ull_rd")
ENTRY_TYPECAST("__half2ull_rn")
ENTRY_TYPECAST("__half2ull_ru")
ENTRY_TYPECAST("__half2ull_rz")
ENTRY_TYPECAST("__half2ushort_rd")
ENTRY_TYPECAST("__half2ushort_rn")
ENTRY_TYPECAST("__half2ushort_ru")
ENTRY_TYPECAST("__half2ushort_rz")
ENTRY_TYPECAST("__halves2half2")
ENTRY_TYPECAST("__high2float")
ENTRY_TYPECAST("__high2half")
ENTRY_TYPECAST("__high2half2")
ENTRY_TYPECAST("__highs2half2")
ENTRY_TYPECAST("__int2half_rd")
ENTRY_TYPECAST("__int2half_rn")
ENTRY_TYPECAST("__int2half_ru")
ENTRY_TYPECAST("__int2half_rz")
ENTRY_TYPECAST("__ll2half_rd")
ENTRY_TYPECAST("__ll2half_rn")
ENTRY_TYPECAST("__ll2half_ru")
ENTRY_TYPECAST("__ll2half_rz")
ENTRY_TYPECAST("__low2float")
ENTRY_TYPECAST("__low2half")
ENTRY_TYPECAST("__low2half2")
ENTRY_TYPECAST("__lowhigh2highlow")
ENTRY_TYPECAST("__lows2half2")
ENTRY_TYPECAST("__short2half_rd")
ENTRY_TYPECAST("__short2half_rn")
ENTRY_TYPECAST("__short2half_ru")
ENTRY_TYPECAST("__short2half_rz")
ENTRY_TYPECAST("__uint2half_rd")
ENTRY_TYPECAST("__uint2half_rn")
ENTRY_TYPECAST("__uint2half_ru")
ENTRY_TYPECAST("__uint2half_rz")
ENTRY_TYPECAST("__ull2half_rd")
ENTRY_TYPECAST("__ull2half_rn")
ENTRY_TYPECAST("__ull2half_ru")
ENTRY_TYPECAST("__ull2half_rz")
ENTRY_TYPECAST("__ushort2half_rd")
ENTRY_TYPECAST("__ushort2half_rn")
ENTRY_TYPECAST("__ushort2half_ru")
ENTRY_TYPECAST("__ushort2half_rz")

// Type Casting Intrinsics
ENTRY_TYPECAST("__double2float_rd")
ENTRY_TYPECAST("__double2float_rn")
ENTRY_TYPECAST("__double2float_ru")
ENTRY_TYPECAST("__double2float_rz")
ENTRY_TYPECAST("__double2int_rd")
ENTRY_TYPECAST("__double2int_rn")
ENTRY_TYPECAST("__double2int_ru")
ENTRY_TYPECAST("__double2int_rz")
ENTRY_TYPECAST("__double2ll_rd")
ENTRY_TYPECAST("__double2ll_rn")
ENTRY_TYPECAST("__double2ll_ru")
ENTRY_TYPECAST("__double2ll_rz")
ENTRY_TYPECAST("__double2uint_rd")
ENTRY_TYPECAST("__double2uint_rn")
ENTRY_TYPECAST("__double2uint_ru")
ENTRY_TYPECAST("__double2uint_rz")
ENTRY_TYPECAST("__double2ull_rd")
ENTRY_TYPECAST("__double2ull_rn")
ENTRY_TYPECAST("__double2ull_ru")
ENTRY_TYPECAST("__double2ull_rz")
ENTRY_TYPECAST("__float2int_rd")
ENTRY_TYPECAST("__float2int_rn")
ENTRY_TYPECAST("__float2int_ru")
ENTRY_TYPECAST("__float2int_rz")
ENTRY_TYPECAST("__float2ll_rd")
ENTRY_TYPECAST("__float2ll_rn")
ENTRY_TYPECAST("__float2ll_ru")
ENTRY_TYPECAST("__float2ll_rz")
ENTRY_TYPECAST("__float2uint_rd")
ENTRY_TYPECAST("__float2uint_rn")
ENTRY_TYPECAST("__float2uint_ru")
ENTRY_TYPECAST("__float2uint_rz")
ENTRY_TYPECAST("__float2ull_rd")
ENTRY_TYPECAST("__float2ull_rn")
ENTRY_TYPECAST("__float2ull_ru")
ENTRY_TYPECAST("__float2ull_rz")
ENTRY_TYPECAST("__int2double_rn")
ENTRY_TYPECAST("__int2float_rd")
ENTRY_TYPECAST("__int2float_rn")
ENTRY_TYPECAST("__int2float_ru")
ENTRY_TYPECAST("__int2float_rz")
ENTRY_TYPECAST("__ll2double_rd")
ENTRY_TYPECAST("__ll2double_rn")
ENTRY_TYPECAST("__ll2double_ru")
ENTRY_TYPECAST("__ll2double_rz")
ENTRY_TYPECAST("__ll2float_rd")
ENTRY_TYPECAST("__ll2float_rn")
ENTRY_TYPECAST("__ll2float_ru")
ENTRY_TYPECAST("__ll2float_rz")
ENTRY_TYPECAST("__uint2double_rn")
ENTRY_TYPECAST("__uint2float_rd")
ENTRY_TYPECAST("__uint2float_rn")
ENTRY_TYPECAST("__uint2float_ru")
ENTRY_TYPECAST("__uint2float_rz")
ENTRY_TYPECAST("__ull2double_rd")
ENTRY_TYPECAST("__ull2double_rn")
ENTRY_TYPECAST("__ull2double_ru")
ENTRY_TYPECAST("__ull2double_rz")
ENTRY_TYPECAST("__ull2float_rd")
ENTRY_TYPECAST("__ull2float_rn")
ENTRY_TYPECAST("__ull2float_ru")
ENTRY_TYPECAST("__ull2float_rz")


// Half Arithmetic Functions
ENTRY_UNSUPPORTED("__hadd_sat")
ENTRY_UNSUPPORTED("__hfma_sat")
ENTRY_UNSUPPORTED("__hmul_sat")
ENTRY_UNSUPPORTED("__hsub_sat")

// Half2 Arithmetic Functions
ENTRY_UNSUPPORTED("__hadd2_sat")
ENTRY_UNSUPPORTED("__hfma2_sat")
ENTRY_UNSUPPORTED("__hmul2_sat")
ENTRY_UNSUPPORTED("__hsub2_sat")

// Half Comparison Functions
ENTRY_UNSUPPORTED("__hequ")
ENTRY_UNSUPPORTED("__hgeu")
ENTRY_UNSUPPORTED("__hgtu")
ENTRY_UNSUPPORTED("__hleu")
ENTRY_UNSUPPORTED("__hltu")
ENTRY_UNSUPPORTED("__hneu")

// Half2 Comparison Functions
ENTRY_UNSUPPORTED("__hbeq2")
ENTRY_UNSUPPORTED("__hbequ2")
ENTRY_UNSUPPORTED("__hbge2")
ENTRY_UNSUPPORTED("__hbgeu2")
ENTRY_UNSUPPORTED("__hbgt2")
ENTRY_UNSUPPORTED("__hbgtu2")
ENTRY_UNSUPPORTED("__hble2")
ENTRY_UNSUPPORTED("__hbleu2")
ENTRY_UNSUPPORTED("__hblt2")
ENTRY_UNSUPPORTED("__hbltu2")
ENTRY_UNSUPPORTED("__hbne2")
ENTRY_UNSUPPORTED("__hbneu2")
ENTRY_UNSUPPORTED("__heq2")
ENTRY_UNSUPPORTED("__hequ2")
ENTRY_UNSUPPORTED("__hge2")
ENTRY_UNSUPPORTED("__hgeu2")
ENTRY_UNSUPPORTED("__hgt2")
ENTRY_UNSUPPORTED("__hgtu2")
ENTRY_UNSUPPORTED("__hisnan2")
ENTRY_UNSUPPORTED("__hle2")
ENTRY_UNSUPPORTED("__hleu2")
ENTRY_UNSUPPORTED("__hlt2")
ENTRY_UNSUPPORTED("__hltu2")
ENTRY_UNSUPPORTED("__hne2")
ENTRY_UNSUPPORTED("__hneu2")

// Half Math Functions
ENTRY_UNSUPPORTED("hrcp")

// Half2 Math Functions
ENTRY_UNSUPPORTED("h2rcp")

// Single Precision Mathematical Functions
ENTRY_UNSUPPORTED("cyl_bessel_i0f")
ENTRY_UNSUPPORTED("cyl_bessel_i1f")
ENTRY_UNSUPPORTED("erfcinvf")
ENTRY_UNSUPPORTED("erfcxf")
ENTRY_UNSUPPORTED("erfinvf")
ENTRY_UNSUPPORTED("j0f")
ENTRY_UNSUPPORTED("j1f")
ENTRY_UNSUPPORTED("jnf")
ENTRY_UNSUPPORTED("norm3df")
ENTRY_UNSUPPORTED("norm4df")
ENTRY_UNSUPPORTED("normcdff")
ENTRY_UNSUPPORTED("normcdfinvf")
ENTRY_UNSUPPORTED("normf")
ENTRY_UNSUPPORTED("rcbrtf")
ENTRY_UNSUPPORTED("rnorm3df")
ENTRY_UNSUPPORTED("rnorm4df")
ENTRY_UNSUPPORTED("rnormf")
ENTRY_UNSUPPORTED("scalblnf")
ENTRY_UNSUPPORTED("scalbnf")
ENTRY_UNSUPPORTED("y0f")
ENTRY_UNSUPPORTED("y1f")
ENTRY_UNSUPPORTED("ynf")

// Double Precision Mathematical Functions
ENTRY_UNSUPPORTED("cyl_bessel_i0")
ENTRY_UNSUPPORTED("cyl_bessel_i1")
ENTRY_UNSUPPORTED("erfcinv")
ENTRY_UNSUPPORTED("erfcx")
ENTRY_UNSUPPORTED("erfinv")
ENTRY_UNSUPPORTED("j0")
ENTRY_UNSUPPORTED("j1")
ENTRY_UNSUPPORTED("jn")
ENTRY_UNSUPPORTED("norm")
ENTRY_UNSUPPORTED("norm3d")
ENTRY_UNSUPPORTED("norm4d")
ENTRY_UNSUPPORTED("normcdf")
ENTRY_UNSUPPORTED("normcdfinv")
ENTRY_UNSUPPORTED("rcbrt")
ENTRY_UNSUPPORTED("rnorm3d")
ENTRY_UNSUPPORTED("rnorm4d")
ENTRY_UNSUPPORTED("rnorm")
ENTRY_UNSUPPORTED("scalbln")
ENTRY_UNSUPPORTED("scalbn")
ENTRY_UNSUPPORTED("y0")
ENTRY_UNSUPPORTED("y1")
ENTRY_UNSUPPORTED("yn")

// Single precision intrinisics
ENTRY_UNSUPPORTED("__saturatef")

// Double precision intrinisics
ENTRY_UNSUPPORTED("__drcp_rd")
ENTRY_UNSUPPORTED("__drcp_rn")
ENTRY_UNSUPPORTED("__drcp_ru")
ENTRY_UNSUPPORTED("__drcp_rz")

// Type Casting Intrinsics
ENTRY_UNSUPPORTED("__double2hiint") // TODO
ENTRY_UNSUPPORTED("__double2loint") // TODO
ENTRY_UNSUPPORTED("__hiloint2double") // TODO

// Integer Intrinsics
ENTRY_UNSUPPORTED("__brev")
ENTRY_UNSUPPORTED("__brevll")
ENTRY_UNSUPPORTED("__byte_perm")
ENTRY_UNSUPPORTED("__ffs")
ENTRY_UNSUPPORTED("__ffsll")
ENTRY_UNSUPPORTED("__funnelshift_l")
ENTRY_UNSUPPORTED("__funnelshift_lc")
ENTRY_UNSUPPORTED("__funnelshift_r")
ENTRY_UNSUPPORTED("__funnelshift_rc")
ENTRY_UNSUPPORTED("__mul64hi")
ENTRY_UNSUPPORTED("__rhadd")
ENTRY_UNSUPPORTED("__sad")
ENTRY_UNSUPPORTED("__uhadd")
ENTRY_UNSUPPORTED("__umul24")
ENTRY_UNSUPPORTED("__umul64hi")
ENTRY_UNSUPPORTED("__umulhi")
ENTRY_UNSUPPORTED("__urhadd")
ENTRY_UNSUPPORTED("__usad")
