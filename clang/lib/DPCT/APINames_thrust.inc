/****************************************************************************
*
* ENTRY(APINAME,  ProcessedOrNot, Priority, MigrationDesc)
*  APIName: name of CUDA API
*
*  ProcessedOrNot:  false|true
*    false: this API has not been processed.
*    true:  this API has been processed, need check MigrationDesc field to
            see if it has be migrated successfully.
*
*  Priority: migration priority, eg. P0 - P4
*    P0:  should support in Beta release.
*    P4:  should support in Gold.
*
*  MigrationDesc: Successful[: Comment] | Unsupported: Comment
*    Successful:   this API has been migrated.
*    Unsupported:  this API can not be migrated currently.
*                  Must add Comment to explain why this API is Unsupported.
*    Comment:      extra comment on the migration.
*
****************************************************************************/
// thrust api
ENTRY(thrust::abs, false, P4, "comment")
ENTRY(thrust::acos, false, P4, "comment")
ENTRY(thrust::acosh, false, P4, "comment")
ENTRY(thrust::adjacent_difference, false, P4, "comment")
ENTRY(thrust::advance, false, P4, "comment")
ENTRY(thrust::all_of, false, P4, "comment")
ENTRY(thrust::any_of, false, P4, "comment")
ENTRY(thrust::arg, false, P4, "comment")
ENTRY(thrust::asin, false, P4, "comment")
ENTRY(thrust::asinh, false, P4, "comment")
ENTRY(thrust::atan, false, P4, "comment")
ENTRY(thrust::atanh, false, P4, "comment")
ENTRY(thrust::binary_search, false, P4, "comment")
ENTRY(thrust::conj, false, P4, "comment")
ENTRY(thrust::copy, true, P4, "Successful")
ENTRY(thrust::copy_if, false, P4, "comment")
ENTRY(thrust::copy_n, true, P4, "Successful")
ENTRY(thrust::cos, false, P4, "comment")
ENTRY(thrust::cosh, false, P4, "comment")
ENTRY(thrust::count, false, P4, "comment")
ENTRY(thrust::count_if, false, P4, "comment")
ENTRY(thrust::device_delete, false, P4, "comment")
ENTRY(thrust::device_free, false, P4, "comment")
ENTRY(thrust::device_malloc, false, P4, "comment")
ENTRY(thrust::device_new, false, P4, "comment")
ENTRY(thrust::device_pointer_cast, false, P4, "comment")
ENTRY(thrust::distance, false, P4, "comment")
ENTRY(thrust::equal, false, P4, "comment")
ENTRY(thrust::equal_range, false, P4, "comment")
ENTRY(thrust::exclusive_scan, false, P4, "comment")
ENTRY(thrust::exclusive_scan_by_key, false, P4, "comment")
ENTRY(thrust::exp, false, P4, "comment")
ENTRY(thrust::fill, false, P4, "comment")
ENTRY(thrust::fill_n, false, P4, "comment")
ENTRY(thrust::find, false, P4, "comment")
ENTRY(thrust::find_if, false, P4, "comment")
ENTRY(thrust::find_if_not, false, P4, "comment")
ENTRY(thrust::for_each, false, P4, "comment")
ENTRY(thrust::for_each_n, false, P4, "comment")
ENTRY(thrust::free, false, P4, "comment")
ENTRY(thrust::gather, false, P4, "comment")
ENTRY(thrust::gather_if, false, P4, "comment")
ENTRY(thrust::generate, false, P4, "comment")
ENTRY(thrust::generate_n, false, P4, "comment")
ENTRY(thrust::get, false, P4, "comment")
ENTRY(thrust::get_temporary_buffer, false, P4, "comment")
ENTRY(thrust::inclusive_scan, false, P4, "comment")
ENTRY(thrust::inclusive_scan_by_key, false, P4, "comment")
ENTRY(thrust::inner_product, false, P4, "comment")
ENTRY(thrust::is_partitioned, false, P4, "comment")
ENTRY(thrust::is_sorted, false, P4, "comment")
ENTRY(thrust::is_sorted_until, false, P4, "comment")
ENTRY(thrust::log, false, P4, "comment")
ENTRY(thrust::log10, false, P4, "comment")
ENTRY(thrust::lower_bound, false, P4, "comment")
ENTRY(thrust::make_constant_iterator, false, P4, "comment")
ENTRY(thrust::make_counting_iterator, false, P4, "comment")
ENTRY(thrust::make_discard_iterator, false, P4, "comment")
ENTRY(thrust::make_pair, false, P4, "comment")
ENTRY(thrust::make_permutation_iterator, false, P4, "comment")
ENTRY(thrust::make_reverse_iterator, false, P4, "comment")
ENTRY(thrust::make_transform_iterator, false, P4, "comment")
ENTRY(thrust::make_tuple, false, P4, "comment")
ENTRY(thrust::make_zip_iterator, false, P4, "comment")
ENTRY(thrust::malloc, false, P4, "comment")
ENTRY(thrust::max_element, false, P4, "comment")
ENTRY(thrust::merge, false, P4, "comment")
ENTRY(thrust::merge_by_key, false, P4, "comment")
ENTRY(thrust::min_element, false, P4, "comment")
ENTRY(thrust::minmax_element, false, P4, "comment")
ENTRY(thrust::mismatch, false, P4, "comment")
ENTRY(thrust::none_of, false, P4, "comment")
ENTRY(thrust::norm, false, P4, "comment")
ENTRY(thrust::not1, false, P4, "comment")
ENTRY(thrust::not2, false, P4, "comment")
ENTRY(thrust::operator!=, false, P4, "comment")
ENTRY(thrust::operator*, false, P4, "comment")
ENTRY(thrust::operator+, true, P4, "Successful")
ENTRY(thrust::operator-, false, P4, "comment")
ENTRY(thrust::operator/, false, P4, "comment")
ENTRY(thrust::operator<, false, P4, "comment")
ENTRY(thrust::operator<<, false, P4, "comment")
ENTRY(thrust::operator<=, false, P4, "comment")
ENTRY(thrust::operator==, false, P4, "comment")
ENTRY(thrust::operator>, false, P4, "comment")
ENTRY(thrust::operator>=, false, P4, "comment")
ENTRY(thrust::operator>>, false, P4, "comment")
ENTRY(thrust::partition, false, P4, "comment")
ENTRY(thrust::partition_copy, false, P4, "comment")
ENTRY(thrust::partition_point, false, P4, "comment")
ENTRY(thrust::polar, false, P4, "comment")
ENTRY(thrust::pow, false, P4, "comment")
ENTRY(thrust::proj, false, P4, "comment")
ENTRY(thrust::raw_pointer_cast, false, P4, "comment")
ENTRY(thrust::raw_reference_cast, false, P4, "comment")
ENTRY(thrust::reduce, false, P4, "comment")
ENTRY(thrust::reduce_by_key, false, P4, "comment")
ENTRY(thrust::reinterpret_tag, false, P4, "comment")
ENTRY(thrust::remove, false, P4, "comment")
ENTRY(thrust::remove_copy, false, P4, "comment")
ENTRY(thrust::remove_copy_if, false, P4, "comment")
ENTRY(thrust::remove_if, false, P4, "comment")
ENTRY(thrust::replace, false, P4, "comment")
ENTRY(thrust::replace_copy, false, P4, "comment")
ENTRY(thrust::replace_copy_if, false, P4, "comment")
ENTRY(thrust::replace_if, false, P4, "comment")
ENTRY(thrust::retag, false, P4, "comment")
ENTRY(thrust::return_temporary_buffer, false, P4, "comment")
ENTRY(thrust::reverse, false, P4, "comment")
ENTRY(thrust::reverse_copy, false, P4, "comment")
ENTRY(thrust::scatter, false, P4, "comment")
ENTRY(thrust::scatter_if, false, P4, "comment")
ENTRY(thrust::sequence, true, P4, "Successful")
ENTRY(thrust::set_difference, false, P4, "comment")
ENTRY(thrust::set_difference_by_key, false, P4, "comment")
ENTRY(thrust::set_intersection, false, P4, "comment")
ENTRY(thrust::set_intersection_by_key, false, P4, "comment")
ENTRY(thrust::set_symmetric_difference, false, P4, "comment")
ENTRY(thrust::set_symmetric_difference_by_key, false, P4, "comment")
ENTRY(thrust::set_union, false, P4, "comment")
ENTRY(thrust::set_union_by_key, false, P4, "comment")
ENTRY(thrust::sin, false, P4, "comment")
ENTRY(thrust::sinh, false, P4, "comment")
ENTRY(thrust::sort, false, P4, "comment")
ENTRY(thrust::sort_by_key, false, P4, "comment")
ENTRY(thrust::sqrt, false, P4, "comment")
ENTRY(thrust::stable_partition, false, P4, "comment")
ENTRY(thrust::stable_partition_copy, false, P4, "comment")
ENTRY(thrust::stable_sort, false, P4, "comment")
ENTRY(thrust::stable_sort_by_key, true, P4, "Successful")
ENTRY(thrust::swap, false, P4, "comment")
ENTRY(thrust::swap_ranges, false, P4, "comment")
ENTRY(thrust::system_category, false, P4, "comment")
ENTRY(thrust::tabulate, false, P4, "comment")
ENTRY(thrust::tan, false, P4, "comment")
ENTRY(thrust::tanh, false, P4, "comment")
ENTRY(thrust::THRUST_PREVENT_MACRO_SUBSTITUTION, false, P4, "comment")
ENTRY(thrust::tie, false, P4, "comment")
ENTRY(thrust::transform, false, P4, "comment")
ENTRY(thrust::transform_exclusive_scan, false, P4, "comment")
ENTRY(thrust::transform_if, false, P4, "comment")
ENTRY(thrust::transform_inclusive_scan, false, P4, "comment")
ENTRY(thrust::transform_reduce, false, P4, "comment")
ENTRY(thrust::uninitialized_copy, false, P4, "comment")
ENTRY(thrust::uninitialized_copy_n, false, P4, "comment")
ENTRY(thrust::uninitialized_fill, false, P4, "comment")
ENTRY(thrust::uninitialized_fill_n, false, P4, "comment")
ENTRY(thrust::unique, false, P4, "comment")
ENTRY(thrust::unique_by_key, false, P4, "comment")
ENTRY(thrust::unique_by_key_copy, false, P4, "comment")
ENTRY(thrust::unique_copy, false, P4, "comment")
ENTRY(thrust::upper_bound, false, P4, "comment")
